name: Gestion analyse CI/CD

on:
  push:
    branches:
      - master
    paths:
      - "gestion-analyse/**"
  pull_request:
    branches:
      - master
    paths:
      - "gestion-analyse/**"

jobs:
  build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-22.04
    permissions:
      contents: read

    defaults:
      run:
        working-directory: ./gestion-analyse

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "corretto"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build with Gradle Wrapper
        run: |
          export VERSION="$(cat version.txt)"
          ./gradlew build -x test -x jar

      - name: Perform testing
        run: |
          ./gradlew test

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('./*.gradle*', './gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Upload jar build artifact
        uses: actions/upload-artifact@v4
        with:
          name: gestion-analyse-jar
          path: gestion-analyse/build/libs/*.jar

  code-quality-analyse:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "corretto"

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build Jar with gradle
        run: |
          cd gestion-analyse
          $VERSION = Get-Content version.txt
          ./gradlew bootJar
        shell: powershell

      - name: analyze code quality
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          cd gestion-analyse
          ./gradlew build -x jar
          ./gradlew sonar

  integration-test:
    runs-on: ubuntu-22.04
    needs: code-quality-analyse
    steps:
      - name: integration-testing
        run: |
          # Add E2E test steps here
          echo "E2E tests for gestion-analyse"

  containerize:
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: gestion-analyse-jar
          path: gestion-analyse/build/libs/

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20
        with:
          cosign-release: v2.2.4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

        # Login to registry except on PR
      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: "${{secrets.CONTAINER_REGISTRY}}"
          username: "${{secrets.CONTAINER_REGISTRY_USER}}"
          password: "${{secrets.CONTAINER_REGISTRY_TOKEN}}"

      - name: Setup version
        run: |
          cd gestion-analyse
          echo "VERSION=$(cat version.txt)" >> "$GITHUB_ENV"

      # Build and push Docker image with Buildx
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09
        with:
          context: ./gestion-analyse
          push: "${{ github.event_name != 'pull_request' }}"
          tags: |
            ${{secrets.CONTAINER_REGISTRY}}/gestion-analyse:latest
            ${{secrets.CONTAINER_REGISTRY}}/gestion-analyse:${{ env.VERSION }}
          cache-from: type=gha
          cache-to: "type=gha,mode=max"

  deploy:
    needs: containerize
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Deploy to production
        run: |
          # Add deployment steps here
          echo "Deploying gestion-analyse to production"

  e2e-tests:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: E2E Tests
        run: |
          # Add E2E test steps here
          echo "E2E tests for gestion-analyse"
